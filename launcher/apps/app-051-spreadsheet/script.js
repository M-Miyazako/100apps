class Spreadsheet {
    constructor() {
        this.data = {};
        this.selectedCell = null;
        this.rows = 30;
        this.cols = 15;
        
        this.setupEventListeners();
        this.createSpreadsheet();
    }
    
    setupEventListeners() {
        document.getElementById('new-btn').addEventListener('click', () => this.newSpreadsheet());
        document.getElementById('save-btn').addEventListener('click', () => this.saveSpreadsheet());
        document.getElementById('load-btn').addEventListener('click', () => this.loadSpreadsheet());
        document.getElementById('formula-input').addEventListener('keydown', (e) => {
            if (e.key === 'Enter') this.applyFormula();
        });
    }
    
    createSpreadsheet() {
        const table = document.getElementById('spreadsheet');
        table.innerHTML = '';
        
        // Header row
        const headerRow = document.createElement('tr');
        headerRow.appendChild(document.createElement('th')); // Corner cell
        
        for (let col = 0; col < this.cols; col++) {
            const th = document.createElement('th');
            th.textContent = String.fromCharCode(65 + col); // A, B, C, ...\n            headerRow.appendChild(th);\n        }\n        \n        table.appendChild(headerRow);\n        \n        // Data rows\n        for (let row = 0; row < this.rows; row++) {\n            const tr = document.createElement('tr');\n            \n            // Row header\n            const rowHeader = document.createElement('td');\n            rowHeader.textContent = row + 1;\n            tr.appendChild(rowHeader);\n            \n            // Data cells\n            for (let col = 0; col < this.cols; col++) {\n                const td = document.createElement('td');\n                const input = document.createElement('input');\n                input.type = 'text';\n                input.className = 'cell-input';\n                input.dataset.row = row;\n                input.dataset.col = col;\n                \n                const cellId = this.getCellId(row, col);\n                input.value = this.data[cellId] || '';\n                \n                input.addEventListener('focus', () => this.selectCell(input));\n                input.addEventListener('blur', () => this.updateCell(input));\n                input.addEventListener('keydown', (e) => {\n                    if (e.key === 'Enter') {\n                        this.updateCell(input);\n                        this.moveToNextCell(input);\n                    }\n                });\n                \n                td.appendChild(input);\n                tr.appendChild(td);\n            }\n            \n            table.appendChild(tr);\n        }\n    }\n    \n    getCellId(row, col) {\n        return `${String.fromCharCode(65 + col)}${row + 1}`;\n    }\n    \n    selectCell(input) {\n        if (this.selectedCell) {\n            this.selectedCell.classList.remove('selected-cell');\n        }\n        \n        this.selectedCell = input;\n        input.classList.add('selected-cell');\n        \n        const cellId = this.getCellId(parseInt(input.dataset.row), parseInt(input.dataset.col));\n        document.getElementById('formula-input').value = input.value;\n    }\n    \n    updateCell(input) {\n        const row = parseInt(input.dataset.row);\n        const col = parseInt(input.dataset.col);\n        const cellId = this.getCellId(row, col);\n        \n        this.data[cellId] = input.value;\n        \n        // Simple formula evaluation\n        if (input.value.startsWith('=')) {\n            try {\n                const formula = input.value.substring(1);\n                const result = this.evaluateFormula(formula);\n                input.value = result;\n            } catch (e) {\n                input.value = '#ERROR';\n            }\n        }\n    }\n    \n    evaluateFormula(formula) {\n        // Replace cell references with values\n        const cellPattern = /[A-Z]+[0-9]+/g;\n        const processedFormula = formula.replace(cellPattern, (match) => {\n            const value = this.data[match] || '0';\n            return isNaN(value) ? '0' : value;\n        });\n        \n        // Simple math evaluation (in production, use a proper formula parser)\n        return eval(processedFormula);\n    }\n    \n    moveToNextCell(input) {\n        const row = parseInt(input.dataset.row);\n        const col = parseInt(input.dataset.col);\n        \n        let nextRow = row;\n        let nextCol = col + 1;\n        \n        if (nextCol >= this.cols) {\n            nextCol = 0;\n            nextRow++;\n        }\n        \n        if (nextRow < this.rows) {\n            const nextCell = document.querySelector(`[data-row=\"${nextRow}\"][data-col=\"${nextCol}\"]`);\n            if (nextCell) {\n                nextCell.focus();\n            }\n        }\n    }\n    \n    applyFormula() {\n        const formula = document.getElementById('formula-input').value;\n        if (this.selectedCell && formula) {\n            this.selectedCell.value = formula;\n            this.updateCell(this.selectedCell);\n        }\n    }\n    \n    newSpreadsheet() {\n        if (confirm('Create new spreadsheet? All data will be lost.')) {\n            this.data = {};\n            this.createSpreadsheet();\n        }\n    }\n    \n    saveSpreadsheet() {\n        const dataStr = JSON.stringify(this.data, null, 2);\n        const dataBlob = new Blob([dataStr], { type: 'application/json' });\n        const url = URL.createObjectURL(dataBlob);\n        \n        const link = document.createElement('a');\n        link.href = url;\n        link.download = 'spreadsheet.json';\n        link.click();\n        \n        URL.revokeObjectURL(url);\n    }\n    \n    loadSpreadsheet() {\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = '.json';\n        \n        input.onchange = (e) => {\n            const file = e.target.files[0];\n            if (file) {\n                const reader = new FileReader();\n                reader.onload = (e) => {\n                    try {\n                        this.data = JSON.parse(e.target.result);\n                        this.createSpreadsheet();\n                    } catch (error) {\n                        alert('Invalid file format');\n                    }\n                };\n                reader.readAsText(file);\n            }\n        };\n        \n        input.click();\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    new Spreadsheet();\n});"